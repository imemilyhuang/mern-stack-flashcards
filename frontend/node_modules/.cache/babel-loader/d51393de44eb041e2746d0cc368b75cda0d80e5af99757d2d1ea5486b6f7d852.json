{"ast":null,"code":"var _jsxFileName = \"/Users/emilyh/workspace/washu/cse330s/creative-project-cp-518897-520021/frontend/src/components/FlashcardQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlashcardQuiz = () => {\n  _s();\n  const [set, setSet] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const {\n    setId\n  } = useParams();\n  const [currentAnswerIndices, setCurrentAnswerIndices] = useState([]);\n  const [clickedIndex, setClickedIndex] = useState(null);\n  const [answerIndex, setAnswerIndex] = useState(null); // the correct card's index in currentAnswerIndices, NOT set.cards\n  const navigate = useNavigate();\n  const [hasClicked, setHasClicked] = useState(false);\n  useEffect(() => {\n    const fetchSet = async () => {\n      const response = await fetch(`http://localhost:5050/api/flashcards/${setId}`, {\n        method: \"GET\",\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      setSet(data);\n    };\n    fetchSet();\n  }, [setId]);\n  useEffect(() => {\n    if (set) {\n      if (set.cards.length < 4) {\n        alert(\"Sorry, the set needs at least 4 cards for quiz mode\");\n        navigate(`/`);\n      } else {\n        if (currentAnswerIndices.length === 0) getPossibleAnswers(); // get answers only if the set is valid\n      }\n    }\n  }, [set, navigate]);\n  useEffect(() => {\n    getPossibleAnswers();\n  }, [currentCardIndex]);\n  const getPossibleAnswers = () => {\n    if (!set) return; // check set exists\n    const answerSet = new Set();\n    answerSet.add(currentCardIndex);\n    while (answerSet.size < 4) {\n      answerSet.add(Math.floor(Math.random() * set.cards.length));\n    }\n    // cite https://stackoverflow.com/questions/20069828/how-to-convert-set-to-array\n    const answerIndices = Array.from(answerSet);\n    console.log(\"answerSet: \");\n    setCurrentAnswerIndices(answerSet);\n\n    // pick a random index to swap the correct answer to\n    const correctIndex = Math.floor(Math.random() * 4); // random int from 0 to 3\n    const temp = answerIndices[correctIndex];\n    answerIndices[correctIndex] = currentCardIndex;\n    answerIndices[0] = temp;\n    setAnswerIndex(correctIndex);\n    console.log(\"currentCardIndex: \" + currentCardIndex);\n    setCurrentAnswerIndices(answerIndices);\n    console.log(\"answerIndices: \");\n    console.log(answerIndices);\n  };\n  const nextCard = () => {\n    setCurrentCardIndex(prevIndex => (prevIndex + 1) % set.cards.length);\n    setClickedIndex(null); // reset card divs to lightgray\n    setAnswerIndex(null); // reset answer index for next round\n  };\n  const handleDivClick = index => {\n    if (!hasClicked) {\n      // prevent spam clicking messing it up\n      setHasClicked(true);\n      console.log(\"clicked answer was: \" + set.cards[index].back);\n      console.log(\"correct answer was: \" + set.cards[answerIndex].back);\n      setClickedIndex(index);\n      if (index === currentAnswerIndices[answerIndex]) {\n        console.log(\"Correct answer clicked!\");\n      } else {\n        console.log(\"Incorrect answer clicked!\");\n      }\n      setTimeout(() => {\n        nextCard();\n        setHasClicked(false);\n      }, 1000); // wait 1 second before going to next card\n    }\n  };\n  if (!set) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 20\n  }, this);\n  const currentCard = set.cards[currentCardIndex];\n  const letterArr = ['a', 'b', 'c', 'd'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"white-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Quizzing: \", set.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: currentCard.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), [0, 1, 2, 3].map(index => {\n          var _set$cards;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleDivClick(index),\n            style: {\n              backgroundColor: index === answerIndex && hasClicked ? 'green' : index === clickedIndex && hasClicked ? 'red' : 'lightgray'\n            },\n            className: \"answer-div\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: [letterArr[index], \". \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 17\n              }, this), \" \", (_set$cards = set.cards[[currentAnswerIndices[index]]]) === null || _set$cards === void 0 ? void 0 : _set$cards.back]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(FlashcardQuiz, \"5dk6Rghz4VmwrqKckgboE6y1V9s=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = FlashcardQuiz;\nexport default FlashcardQuiz;\nvar _c;\n$RefreshReg$(_c, \"FlashcardQuiz\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","FlashcardQuiz","_s","set","setSet","currentCardIndex","setCurrentCardIndex","setId","currentAnswerIndices","setCurrentAnswerIndices","clickedIndex","setClickedIndex","answerIndex","setAnswerIndex","navigate","hasClicked","setHasClicked","fetchSet","response","fetch","method","headers","localStorage","getItem","data","json","cards","length","alert","getPossibleAnswers","answerSet","Set","add","size","Math","floor","random","answerIndices","Array","from","console","log","correctIndex","temp","nextCard","prevIndex","handleDivClick","index","back","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentCard","letterArr","title","front","map","_set$cards","onClick","style","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/emilyh/workspace/washu/cse330s/creative-project-cp-518897-520021/frontend/src/components/FlashcardQuiz.js"],"sourcesContent":["\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst FlashcardQuiz = () => {\n  const [set, setSet] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const { setId } = useParams();\n  const [currentAnswerIndices, setCurrentAnswerIndices] = useState([]);\n  const [clickedIndex, setClickedIndex] = useState(null);\n  const [answerIndex, setAnswerIndex] = useState(null); // the correct card's index in currentAnswerIndices, NOT set.cards\n  const navigate = useNavigate();\n  const [hasClicked, setHasClicked] = useState(false);\n\n  useEffect(() => {\n    const fetchSet = async () => {\n      const response = await fetch(`http://localhost:5050/api/flashcards/${setId}`, {\n        method: \"GET\",\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      const data = await response.json();\n      setSet(data);\n\n    };\n    fetchSet();\n  }, [setId]);\n\n  useEffect(() => {\n    if (set) {\n      if (set.cards.length < 4) {\n        alert(\"Sorry, the set needs at least 4 cards for quiz mode\");\n        navigate(`/`);\n      } else {\n        if (currentAnswerIndices.length===0) getPossibleAnswers(); // get answers only if the set is valid\n      }\n    }\n  }, [set, navigate]);\n\n  useEffect(() => {\n    getPossibleAnswers();\n  }, [currentCardIndex])\n\n\n  const getPossibleAnswers = () => {\n    if (!set) return; // check set exists\n    const answerSet = new Set();\n    answerSet.add(currentCardIndex);\n    while (answerSet.size < 4) {\n        answerSet.add(Math.floor(Math.random() * set.cards.length));\n    }\n    // cite https://stackoverflow.com/questions/20069828/how-to-convert-set-to-array\n    const answerIndices = Array.from(answerSet);\n    console.log(\"answerSet: \");\n    setCurrentAnswerIndices(answerSet);\n    \n    // pick a random index to swap the correct answer to\n    const correctIndex = Math.floor(Math.random() * 4); // random int from 0 to 3\n    const temp = answerIndices[correctIndex];\n    answerIndices[correctIndex] = currentCardIndex;\n    answerIndices[0] = temp;\n    setAnswerIndex(correctIndex);\n    console.log(\"currentCardIndex: \"+currentCardIndex);\n    setCurrentAnswerIndices(answerIndices);\n    console.log(\"answerIndices: \");\n    console.log(answerIndices);\n\n  };\n\n\n  const nextCard = () => {\n    setCurrentCardIndex((prevIndex) => (prevIndex + 1) % set.cards.length);\n    setClickedIndex(null); // reset card divs to lightgray\n    setAnswerIndex(null); // reset answer index for next round\n  };\n\n  const handleDivClick = (index) => {\n    if (!hasClicked) { // prevent spam clicking messing it up\n        setHasClicked(true);\n        console.log(\"clicked answer was: \" + set.cards[index].back);\n        console.log(\"correct answer was: \" + set.cards[answerIndex].back);\n\n        setClickedIndex(index);\n        if (index === currentAnswerIndices[answerIndex]) {\n        console.log(\"Correct answer clicked!\");\n        } else {\n        console.log(\"Incorrect answer clicked!\");\n        }\n\n        setTimeout(() => {\n        nextCard();\n        setHasClicked(false);\n        }, 1000); // wait 1 second before going to next card\n    }\n  };\n\n\n  if (!set) return <div className=\"loading\">Loading...</div>\n\n  const currentCard = set.cards[currentCardIndex];\n  const letterArr = ['a', 'b', 'c', 'd']\n\n  return (\n    <div className=\"white-container\">\n      <h2>Quizzing: {set.title}</h2>\n      <div className=\"answer-container\">\n        <div className=\"card-content\">\n          <h3>{currentCard.front}</h3>\n          {[0,1,2,3].map((index) => (\n            <div\n              key={index}\n              onClick={() => handleDivClick(index)}\n              style={{\n                backgroundColor: (index === answerIndex && hasClicked)\n                  ? 'green'\n                  : (index === clickedIndex && hasClicked)\n                  ? 'red'\n                  : 'lightgray',\n              }}\n              className=\"answer-div\"\n            >\n              <p>\n                <b>{letterArr[index]}. </b> {set.cards[[currentAnswerIndices[index]]]?.back}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FlashcardQuiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}