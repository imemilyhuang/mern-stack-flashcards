{"ast":null,"code":"var _jsxFileName = \"/Users/emilyh/workspace/washu/cse330s/creative-project-cp-518897-520021/frontend/src/components/FlashcardQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FlashcardQuiz = () => {\n  _s();\n  const [set, setSet] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const {\n    setId\n  } = useParams();\n  const [currentAnswerIndices, setCurrentAnswerIndices] = useState([]);\n  const [clickedIndex, setClickedIndex] = useState(null);\n  const [answerIndex, setAnswerIndex] = useState(null); // the correct card's index in currentAnswerIndices, NOT set.cards\n  const navigate = useNavigate();\n  const [hasClicked, setHasClicked] = useState(false);\n\n  // state variables for accuracy tracking\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [totalAnswers, setTotalAnswers] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  useEffect(() => {\n    const fetchSet = async () => {\n      const response = await fetch(`http://localhost:5050/api/flashcards/${setId}`, {\n        method: \"GET\",\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      const data = await response.json();\n      setSet(data);\n    };\n    fetchSet();\n  }, [setId]);\n  useEffect(() => {\n    if (set) {\n      if (set.cards.length < 4) {\n        alert(\"Sorry, the set needs at least 4 cards for quiz mode\");\n        navigate(`/`);\n      } else {\n        if (currentAnswerIndices.length === 0) getPossibleAnswers(); // get answers only if the set is valid\n      }\n    }\n  }, [set, navigate]);\n  useEffect(() => {\n    getPossibleAnswers();\n  }, [currentCardIndex]);\n  const getPossibleAnswers = () => {\n    if (!set) return; // check set exists\n    const answerSet = new Set();\n    answerSet.add(currentCardIndex);\n    while (answerSet.size < 4) {\n      answerSet.add(Math.floor(Math.random() * set.cards.length));\n    }\n    // cite https://stackoverflow.com/questions/20069828/how-to-convert-set-to-array\n    const answerIndices = Array.from(answerSet);\n    console.log(\"answerSet: \");\n    setCurrentAnswerIndices(answerSet);\n\n    // pick a random index to swap the correct answer to\n    const correctIndex = Math.floor(Math.random() * 4); // random int from 0 to 3\n    const temp = answerIndices[correctIndex];\n    answerIndices[correctIndex] = currentCardIndex;\n    answerIndices[0] = temp;\n    setAnswerIndex(correctIndex);\n    console.log(\"currentCardIndex: \" + currentCardIndex);\n    setCurrentAnswerIndices(answerIndices);\n    console.log(\"answerIndices: \");\n    console.log(answerIndices);\n  };\n  const nextCard = () => {\n    setCurrentCardIndex(prevIndex => (prevIndex + 1) % set.cards.length);\n    setClickedIndex(null); // reset card divs to lightgray\n    setAnswerIndex(null); // reset answer index for next round\n  };\n  const handleDivClick = index => {\n    if (!hasClicked) {\n      // prevent spam clicking messing it up\n      setHasClicked(true);\n      console.log(\"clicked answer was: \" + set.cards[index].back);\n      console.log(\"correct answer was: \" + set.cards[answerIndex].back);\n      setClickedIndex(index);\n      if (index === currentAnswerIndices[answerIndex]) {\n        console.log(\"Correct answer clicked!\");\n        setCorrectAnswers(prevCorrect => prevCorrect + 1);\n      } else {\n        console.log(\"Incorrect answer clicked!\");\n      }\n      setTotalAnswers(prevTotal => prevTotal + 1);\n      const newAccuracy = (correctAnswers + (index === currentAnswerIndices[answerIndex] ? 1 : 0)) / (totalAnswers + 1) * 100;\n      setAccuracy(newAccuracy);\n      setTimeout(() => {\n        nextCard();\n        setHasClicked(false);\n      }, 1000); // wait 1 second before going to next card\n    }\n  };\n  if (!set) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 20\n  }, this);\n  const currentCard = set.cards[currentCardIndex];\n  const letterArr = ['a', 'b', 'c', 'd'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"white-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Quizzing: \", set.title]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Correct Answers: \", correctAnswers, \" / \", totalAnswers]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Accuracy This Round: \", accuracy.toFixed(2), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [currentCard.isFavorite ? '⭐ ' : '', currentCard.front]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), [0, 1, 2, 3].map(index => {\n          var _set$cards;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handleDivClick(index),\n            style: {\n              backgroundColor: index === answerIndex && hasClicked ? 'green' : index === clickedIndex && hasClicked ? 'red' : 'lightgray'\n            },\n            className: \"answer-div\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                children: [letterArr[index], \". \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 17\n              }, this), \" \", (_set$cards = set.cards[[currentAnswerIndices[index]]]) === null || _set$cards === void 0 ? void 0 : _set$cards.back]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(FlashcardQuiz, \"ZhOzx6HrzRrBXm9lqU/q566YvTg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = FlashcardQuiz;\nexport default FlashcardQuiz;\nvar _c;\n$RefreshReg$(_c, \"FlashcardQuiz\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","FlashcardQuiz","_s","set","setSet","currentCardIndex","setCurrentCardIndex","setId","currentAnswerIndices","setCurrentAnswerIndices","clickedIndex","setClickedIndex","answerIndex","setAnswerIndex","navigate","hasClicked","setHasClicked","correctAnswers","setCorrectAnswers","totalAnswers","setTotalAnswers","accuracy","setAccuracy","fetchSet","response","fetch","method","headers","localStorage","getItem","data","json","cards","length","alert","getPossibleAnswers","answerSet","Set","add","size","Math","floor","random","answerIndices","Array","from","console","log","correctIndex","temp","nextCard","prevIndex","handleDivClick","index","back","prevCorrect","prevTotal","newAccuracy","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentCard","letterArr","title","toFixed","isFavorite","front","map","_set$cards","onClick","style","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/emilyh/workspace/washu/cse330s/creative-project-cp-518897-520021/frontend/src/components/FlashcardQuiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst FlashcardQuiz = () => {\n  const [set, setSet] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const { setId } = useParams();\n  const [currentAnswerIndices, setCurrentAnswerIndices] = useState([]);\n  const [clickedIndex, setClickedIndex] = useState(null);\n  const [answerIndex, setAnswerIndex] = useState(null); // the correct card's index in currentAnswerIndices, NOT set.cards\n  const navigate = useNavigate();\n  const [hasClicked, setHasClicked] = useState(false);\n\n  // state variables for accuracy tracking\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [totalAnswers, setTotalAnswers] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n\n  useEffect(() => {\n    const fetchSet = async () => {\n      const response = await fetch(`http://localhost:5050/api/flashcards/${setId}`, {\n        method: \"GET\",\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      const data = await response.json();\n      setSet(data);\n\n    };\n    fetchSet();\n  }, [setId]);\n\n  useEffect(() => {\n    if (set) {\n      if (set.cards.length < 4) {\n        alert(\"Sorry, the set needs at least 4 cards for quiz mode\");\n        navigate(`/`);\n      } else {\n        if (currentAnswerIndices.length===0) getPossibleAnswers(); // get answers only if the set is valid\n      }\n    }\n  }, [set, navigate]);\n\n  useEffect(() => {\n    getPossibleAnswers();\n  }, [currentCardIndex])\n\n\n  const getPossibleAnswers = () => {\n    if (!set) return; // check set exists\n    const answerSet = new Set();\n    answerSet.add(currentCardIndex);\n    while (answerSet.size < 4) {\n        answerSet.add(Math.floor(Math.random() * set.cards.length));\n    }\n    // cite https://stackoverflow.com/questions/20069828/how-to-convert-set-to-array\n    const answerIndices = Array.from(answerSet);\n    console.log(\"answerSet: \");\n    setCurrentAnswerIndices(answerSet);\n    \n    // pick a random index to swap the correct answer to\n    const correctIndex = Math.floor(Math.random() * 4); // random int from 0 to 3\n    const temp = answerIndices[correctIndex];\n    answerIndices[correctIndex] = currentCardIndex;\n    answerIndices[0] = temp;\n    setAnswerIndex(correctIndex);\n    console.log(\"currentCardIndex: \"+currentCardIndex);\n    setCurrentAnswerIndices(answerIndices);\n    console.log(\"answerIndices: \");\n    console.log(answerIndices);\n\n  };\n\n  const nextCard = () => {\n    setCurrentCardIndex((prevIndex) => (prevIndex + 1) % set.cards.length);\n    setClickedIndex(null); // reset card divs to lightgray\n    setAnswerIndex(null); // reset answer index for next round\n  };\n\n  const handleDivClick = (index) => {\n    if (!hasClicked) { // prevent spam clicking messing it up\n        setHasClicked(true);\n        console.log(\"clicked answer was: \" + set.cards[index].back);\n        console.log(\"correct answer was: \" + set.cards[answerIndex].back);\n\n        setClickedIndex(index);\n\n        if (index === currentAnswerIndices[answerIndex]) {\n          console.log(\"Correct answer clicked!\");\n          setCorrectAnswers((prevCorrect) => prevCorrect + 1);\n        } else {\n          console.log(\"Incorrect answer clicked!\");\n        }\n\n        setTotalAnswers((prevTotal) => prevTotal + 1);\n\n        const newAccuracy = (correctAnswers + (index === currentAnswerIndices[answerIndex] ? 1 : 0)) / (totalAnswers + 1) * 100;\n        setAccuracy(newAccuracy);\n\n        setTimeout(() => {\n        nextCard();\n        setHasClicked(false);\n        }, 1000); // wait 1 second before going to next card\n    }\n  };\n\n\n  if (!set) return <div className=\"loading\">Loading...</div>\n\n  const currentCard = set.cards[currentCardIndex];\n  const letterArr = ['a', 'b', 'c', 'd']\n\n  return (\n    <div className=\"white-container\">\n      <h2>Quizzing: {set.title}</h2>\n      <p>Correct Answers: {correctAnswers} / {totalAnswers}</p>\n      <p>Accuracy This Round: {accuracy.toFixed(2)}%</p>\n      <div className=\"answer-container\">\n        <div className=\"card-content\">\n          <h3>{currentCard.isFavorite ? '⭐ ' : ''}{currentCard.front}</h3>\n          {[0,1,2,3].map((index) => (\n            <div\n              key={index}\n              onClick={() => handleDivClick(index)}\n              style={{\n                backgroundColor: (index === answerIndex && hasClicked)\n                  ? 'green'\n                  : (index === clickedIndex && hasClicked)\n                  ? 'red'\n                  : 'lightgray',\n              }}\n              className=\"answer-div\"\n            >\n              <p>\n                <b>{letterArr[index]}. </b> {set.cards[[currentAnswerIndices[index]]]?.back}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FlashcardQuiz;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACU,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM;IAAEY;EAAM,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC7B,MAAM,CAACW,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAMmB,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACwB,YAAY,EAAEC,eAAe,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,CAAC,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAM2B,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwClB,KAAK,EAAE,EAAE;QAC5EmB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC1D;MACF,CAAC,CAAC;MACF,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC3B,MAAM,CAAC0B,IAAI,CAAC;IAEd,CAAC;IACDP,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAAChB,KAAK,CAAC,CAAC;EAEXX,SAAS,CAAC,MAAM;IACd,IAAIO,GAAG,EAAE;MACP,IAAIA,GAAG,CAAC6B,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACxBC,KAAK,CAAC,qDAAqD,CAAC;QAC5DpB,QAAQ,CAAC,GAAG,CAAC;MACf,CAAC,MAAM;QACL,IAAIN,oBAAoB,CAACyB,MAAM,KAAG,CAAC,EAAEE,kBAAkB,CAAC,CAAC,CAAC,CAAC;MAC7D;IACF;EACF,CAAC,EAAE,CAAChC,GAAG,EAAEW,QAAQ,CAAC,CAAC;EAEnBlB,SAAS,CAAC,MAAM;IACduC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAAC9B,gBAAgB,CAAC,CAAC;EAGtB,MAAM8B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAAChC,GAAG,EAAE,OAAO,CAAC;IAClB,MAAMiC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC3BD,SAAS,CAACE,GAAG,CAACjC,gBAAgB,CAAC;IAC/B,OAAO+B,SAAS,CAACG,IAAI,GAAG,CAAC,EAAE;MACvBH,SAAS,CAACE,GAAG,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGvC,GAAG,CAAC6B,KAAK,CAACC,MAAM,CAAC,CAAC;IAC/D;IACA;IACA,MAAMU,aAAa,GAAGC,KAAK,CAACC,IAAI,CAACT,SAAS,CAAC;IAC3CU,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BtC,uBAAuB,CAAC2B,SAAS,CAAC;;IAElC;IACA,MAAMY,YAAY,GAAGR,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD,MAAMO,IAAI,GAAGN,aAAa,CAACK,YAAY,CAAC;IACxCL,aAAa,CAACK,YAAY,CAAC,GAAG3C,gBAAgB;IAC9CsC,aAAa,CAAC,CAAC,CAAC,GAAGM,IAAI;IACvBpC,cAAc,CAACmC,YAAY,CAAC;IAC5BF,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAC1C,gBAAgB,CAAC;IAClDI,uBAAuB,CAACkC,aAAa,CAAC;IACtCG,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;EAE5B,CAAC;EAED,MAAMO,QAAQ,GAAGA,CAAA,KAAM;IACrB5C,mBAAmB,CAAE6C,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIhD,GAAG,CAAC6B,KAAK,CAACC,MAAM,CAAC;IACtEtB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;IACvBE,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,MAAMuC,cAAc,GAAIC,KAAK,IAAK;IAChC,IAAI,CAACtC,UAAU,EAAE;MAAE;MACfC,aAAa,CAAC,IAAI,CAAC;MACnB8B,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAG5C,GAAG,CAAC6B,KAAK,CAACqB,KAAK,CAAC,CAACC,IAAI,CAAC;MAC3DR,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAG5C,GAAG,CAAC6B,KAAK,CAACpB,WAAW,CAAC,CAAC0C,IAAI,CAAC;MAEjE3C,eAAe,CAAC0C,KAAK,CAAC;MAEtB,IAAIA,KAAK,KAAK7C,oBAAoB,CAACI,WAAW,CAAC,EAAE;QAC/CkC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;QACtC7B,iBAAiB,CAAEqC,WAAW,IAAKA,WAAW,GAAG,CAAC,CAAC;MACrD,CAAC,MAAM;QACLT,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAC1C;MAEA3B,eAAe,CAAEoC,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;MAE7C,MAAMC,WAAW,GAAG,CAACxC,cAAc,IAAIoC,KAAK,KAAK7C,oBAAoB,CAACI,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAKO,YAAY,GAAG,CAAC,CAAC,GAAG,GAAG;MACvHG,WAAW,CAACmC,WAAW,CAAC;MAExBC,UAAU,CAAC,MAAM;QACjBR,QAAQ,CAAC,CAAC;QACVlC,aAAa,CAAC,KAAK,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACd;EACF,CAAC;EAGD,IAAI,CAACb,GAAG,EAAE,oBAAOH,OAAA;IAAK2D,SAAS,EAAC,SAAS;IAAAC,QAAA,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAE1D,MAAMC,WAAW,GAAG9D,GAAG,CAAC6B,KAAK,CAAC3B,gBAAgB,CAAC;EAC/C,MAAM6D,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAEtC,oBACElE,OAAA;IAAK2D,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B5D,OAAA;MAAA4D,QAAA,GAAI,YAAU,EAACzD,GAAG,CAACgE,KAAK;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC9BhE,OAAA;MAAA4D,QAAA,GAAG,mBAAiB,EAAC3C,cAAc,EAAC,KAAG,EAACE,YAAY;IAAA;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzDhE,OAAA;MAAA4D,QAAA,GAAG,uBAAqB,EAACvC,QAAQ,CAAC+C,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAClDhE,OAAA;MAAK2D,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/B5D,OAAA;QAAK2D,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B5D,OAAA;UAAA4D,QAAA,GAAKK,WAAW,CAACI,UAAU,GAAG,IAAI,GAAG,EAAE,EAAEJ,WAAW,CAACK,KAAK;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EAC/D,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACO,GAAG,CAAElB,KAAK;UAAA,IAAAmB,UAAA;UAAA,oBACnBxE,OAAA;YAEEyE,OAAO,EAAEA,CAAA,KAAMrB,cAAc,CAACC,KAAK,CAAE;YACrCqB,KAAK,EAAE;cACLC,eAAe,EAAGtB,KAAK,KAAKzC,WAAW,IAAIG,UAAU,GACjD,OAAO,GACNsC,KAAK,KAAK3C,YAAY,IAAIK,UAAU,GACrC,KAAK,GACL;YACN,CAAE;YACF4C,SAAS,EAAC,YAAY;YAAAC,QAAA,eAEtB5D,OAAA;cAAA4D,QAAA,gBACE5D,OAAA;gBAAA4D,QAAA,GAAIM,SAAS,CAACb,KAAK,CAAC,EAAC,IAAE;cAAA;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,KAAC,GAAAQ,UAAA,GAACrE,GAAG,CAAC6B,KAAK,CAAC,CAACxB,oBAAoB,CAAC6C,KAAK,CAAC,CAAC,CAAC,cAAAmB,UAAA,uBAAxCA,UAAA,CAA0ClB,IAAI;YAAA;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1E;UAAC,GAbCX,KAAK;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAcP,CAAC;QAAA,CACP,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC9D,EAAA,CA5IID,aAAa;EAAA,QAGCJ,SAAS,EAIVC,WAAW;AAAA;AAAA8E,EAAA,GAPxB3E,aAAa;AA8InB,eAAeA,aAAa;AAAC,IAAA2E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}